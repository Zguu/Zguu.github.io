---
title: " [베이지안 with Python] PyMC3를 활용해 Binomial 추론하기"
tags: Bayesian Python Binomial prior posterior
---

# PyMC3를 활용한 동전 던지기

prior(사전분포), likelihood(가능도), posterior(사후분포)가 어떤 관계를 갖는지 실제 파이썬 코드로 구현해보며 확인해보자. 파이썬에서 사용할 수 있는 베이즈 최적화 모듈은 PyMC가 있다. 파이썬 3에 최적화된 PyMC3를 사용한다. PyMC2와는 어느정도 차이가 있으므로, 주의하며 사용하자. 동전 던지기 (coin flipping) 예시는 결과가 0아니면 1만 나오는 Binomial 사건이므로, prior로 beta prior를 택했다.

PyMC 모듈을 사용해, 사후분포와 가능도가 변할 때 어떻게 사후분포가 변하는 지 확인할 수 있다.

```python
n = 100
h = 2
alpha = 1
beta = 1
niter = 1000
```

동전을 던지는 전체 시행 횟수는 100, 그 중에서 앞면은 극단적으로 적게 2번이 나왔다고 가정해보자. alpha와 beta는 prior 분포를 결정한다. 구체적인 이야기는 아래 그래프를 보며 더 설명하겠다. sampling iteration 횟수는 1000번으로 정했다.
```python
plt.figure(figsize = (8,6))
plt.hist(trace['p'], 15, histtype = 'step', normed = True, label = 'post');
x = np.linspace(0,1,100)
plt.plot(x, stats.beta.pdf(x, alpha, beta), label = 'prior');
plt.legend(loc='best');
plt.show()
```
!['Img1'](https://imgur.com/cQ9iOha.png)

alpha = beta = 1 인 탓에, 사전분포는 uniform 분포 형태를 취하고 있으며, 이는 데이터가 우리에게 주어지기 전에 어떠한 정보도 포함하고 있지 않음을 얘기한다. 이 때문에, 그래프가 보여주는 사후분포는 우리의 데이터를 따라 매우 왼쪽으로 편향 돼있다. 데이터에서 100번의 시도 중 2번만 앞면이 나왔으니, 데이터를 보고 나서 우리의 믿음인 사후분포는 $\theta$값이 상당히 작을 것이라고 믿게 된 것이다. 이제 여기서 사전분포가 정보를 포함하도록 변경해보자.
